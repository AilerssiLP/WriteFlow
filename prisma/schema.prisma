// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(cuid())
  username        String        @unique
  name            String?
  email           String        @unique
  emailVerified   DateTime?
  image           String?
  coverImage      String?
  password        String?
  role            Role          @default(USER)
  accounts        Account?
  about           About?
  followerCount   Int           @default(0)
  followingCount  Int           @default(0)
  likedBlogIds    BlogLike[]
  likedCommentIds CommentLike[]
  followers       Follows[]     @relation("follower")
  following       Follows[]     @relation("following")
  blogs           Blog[]
  bookmarks       Blog[]        @relation("bookmarkedBy")
  history         View[]
  comments        Comment[]
  report          Report[]      @relation("IssuedBy")
  reportedUser    Report[]      @relation("ReportedUser")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model About {
  id        String   @id @default(cuid())
  userId    String   @unique
  bio       String?
  location  String?
  website   String?
  career    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Blog {
  id           String     @id @default(cuid())
  slug         String?    @unique
  userId       String
  title        String
  description  String?
  content      String?
  isPublished  Boolean    @default(false)
  thumbnail    String?
  coverImage   String?
  isCommentOff Boolean    @default(false)
  likeCount    Int        @default(0)
  noOfComments Int        @default(0)
  noOfViews    Int        @default(0)
  viewedBy     View[]
  bookmarkedBy User[]     @relation("bookmarkedBy")
  likedBy      BlogLike[]
  tags         Tag[]
  Comment      Comment[]
  Report       Report[]   @relation("ReportedBlog")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model View {
  id        String   @id @default(cuid())
  userId    String
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog? @relation(fields: [blogId], references: [id], onDelete: Cascade)
}

model BlogLike {
  userId    String
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@id([userId, blogId])
}

model CommentLike {
  userId    String
  commentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
}

//TODO: Tag model
model Tag {
  id         String   @id @default(cuid())
  tag        String   @unique
  posts      Blog[]
  postsCount Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  userId    String?
  blogId    String?
  content   String
  parentId  String? // Parent Comment ID
  likeCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likedBy  CommentLike[]
  user     User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog     Blog?         @relation(fields: [blogId], references: [id], onDelete: Cascade)
  parent   Comment?      @relation("CommentParent", fields: [parentId], references: [id], onDelete: Cascade)
  children Comment[]     @relation("CommentParent")
  Report   Report[]      @relation("ReportedComment")
}

model Log {
  id      String    @id @default(cuid())
  userId  String?
  type    String
  message String
  request Request[]
  error   Error[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Severity {
  INFO
  WARN
  ERROR
}

model Request {
  id         String  @id @default(cuid())
  userId     String?
  method     String
  path       String
  statusCode Int
  duration   Int?
  ip         String
  userAgent  String
  logId      String
  log        Log     @relation(fields: [logId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Error {
  id       String   @id @default(cuid())
  userId   String?
  message  String
  stack    String?
  severity Severity
  logId    String
  log      Log      @relation(fields: [logId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id                String       @id @default(cuid())
  title             String
  issue             String
  status            ReportStatus @default(PENDING)
  closedBy          String?
  reportedUserId    String?
  reportedBlogId    String?
  reportedCommentId String?
  createdBy         String?
  reportedUser      User?        @relation(name: "ReportedUser", fields: [reportedUserId], references: [id])
  reportedBlog      Blog?        @relation(name: "ReportedBlog", fields: [reportedBlogId], references: [id])
  reportedComment   Comment?     @relation(name: "ReportedComment", fields: [reportedCommentId], references: [id])
  issuedBy          User?        @relation(name: "IssuedBy", fields: [createdBy], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReportStatus {
  PENDING
  RESOLVED
  REJECTED
}
